#---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids
import os

configfile: workflow.source_path('../config/snakebids.yml')

config['pybids_inputs']['t1']['custom_path'] = os.path.join(config['bids_dir'], config['pybids_inputs']['t1']['custom_path'])
# Get input wildcards
inputs = snakebids.generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybids_database_dir=config.get("pybids_db_dir"),
    pybids_reset_database=config.get("pybids_db_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
    use_bids_inputs=True,
)

#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(config['pybids_inputs'])

#---- end snakebids boilerplate ------------------------------------------------

rule ciftify_recon_all:
    input:
        sub_dir = inputs.path['t1'],
        fs_license=os.environ["FS_LICENSE"]
        if config["fs_license"] == False
        else config["fs_license"],
    params:
        freesurfer_dir=config['bids_dir'],
        ciftify_outdir=bids(root="derivatives", suffix="ciftify"),
        ciftify_opts=config["ciftify_opts"],
    output:
        done=touch(
            bids(root="work", suffix="ciftify.done", **inputs.input_wildcards["t1"])
        ),
    container: config["singularity"]["ciftify"] 
    group:
        "subj"
    threads: 8
    resources:
        mem_mb=16000,
        time=1440,
    log:
        bids(root="logs", suffix="ciftifyreconall.log", **inputs.input_wildcards["t1"]),
    shell:
        """
        ciftify_recon_all {params.ciftify_opts} --ciftify-work-dir '{params.ciftify_outdir}' --fs-subjects-dir '{params.freesurfer_dir}' --fs-license '{input.fs_license}' --n_cpus '{threads}' 'sub-{wildcards.subject}' &> {log}
        cifti_vis_recon_all subject --ciftify-work-dir '{params.ciftify_outdir}' 'sub-{wildcards.subject}' &> {log}
        cifti_vis_recon_all index --ciftify-work-dir '{params.ciftify_outdir}' &> {log}
        """

rule all:
    input:
        expand(
            expand(
                rules.ciftify_recon_all.output.done,
                allow_missing=True,
            ),
            zip,
            **inputs.input_zip_lists["t1"]
        ),
    default_target: True
